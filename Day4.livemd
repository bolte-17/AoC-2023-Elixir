# Day 4

```elixir
Mix.install([
  {:kino_aoc, "~> 0.1.5"}
])
```

## Input

<!-- livebook:{"attrs":{"assign_to":"puzzle_input","day":"4","session_secret":"AOC_SESSION","year":"2023"},"chunks":null,"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, puzzle_input} =
  KinoAOC.download_puzzle("2023", "4", System.fetch_env!("LB_AOC_SESSION"))
```

```elixir
scratchcards =
  puzzle_input
  |> String.split("\n")
  |> Enum.map(fn s ->
    Regex.scan(~r/\d+(?![:\d])/, s)
    |> Enum.flat_map(& &1)
    |> Enum.map(&String.to_integer/1)
    |> Enum.split(10)
    |> Tuple.to_list()
    |> Enum.map(&MapSet.new/1)
  end)
```

## Part 1

```elixir
win_counts =
  scratchcards
  |> Enum.map(&apply(MapSet, :intersection, &1))
  |> Enum.map(&Enum.count/1)
```

```elixir
win_counts
|> Enum.filter(&(&1 > 0))
|> Enum.map(&(:math.pow(2, &1 - 1) |> trunc))
|> Enum.sum()
```

## Part 2

```elixir
win_counts
|> Enum.reverse()
|> Enum.reduce([], fn wins, acc ->
  [1 + Enum.sum(Enum.take(acc, wins)) | acc]
end)
|> Enum.sum()
```

<!-- livebook:{"offset":1055,"stamp":{"token":"XCP.z0_6HGqyIb6Lo1geZ_UamgWBRXxUhK-aiE6hjF_cLiwR5P49OFLyBEgdwIYXnD80lM-9PNQpVfCzY6M-C0wsLQMmfAnMlT3W4fZvSE1sq-GB9q5Pbi0","version":2}} -->
